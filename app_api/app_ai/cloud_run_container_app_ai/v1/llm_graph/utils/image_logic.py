import logging
from typing import Optional, Literal


from pydantic import BaseModel
from google.genai import types
from vertexai.preview.vision_models import ImageGenerationModel

from llm_graph.utils.llm_models import genai_client
from common.other import (
	upload_resp_file_content_to_bucket, random_name_generator, download_image
)


logger = logging.getLogger("APP_AI_V1_"+__name__)


class ImageGenerationInput(BaseModel):
	"""
	`aspect_ratio`: 1:1 or 3:4 or 4:3 or 9:16 or 16:9

	`number_of_images`: Accepted integer values: 1-4

	`safety_filter_level`: string. Optional. A setting that controls safety filter
	thresholds for generated images. Available values:
		- block_low_and_above: The highest safety threshold, resulting in the
		largest amount of generated images that are filtered.
		- block_medium_and_above (default): A medium safety threshold that
		balances filtering for potentially harmful and safe content.
		- block_only_high: A safety threshold that reduces the number of requests
		blocked due to safety filters. This setting might increase objectionable
		content generated by Imagen.
	`person_generation`: the options are:
		- allow_adult (default): Allow generation of adults only,
		except for celebrity generation. Celebrity generation is not allowed for
		any setting.
		- dont_allow: Disable the inclusion of people or faces in generated images
	"""

	prompt: str
	number_of_images: int = 1
	negative_prompt: str = None
	language: str = "en"  # this should never change
	aspect_ratio: Optional[Literal["1:1", "9:16", "16:9", "4:3", "3:4"]] = "1:1"
	safety_filter_level: Literal[
		"block_most", "block_some", "block_few", "block_fewest"
	] = "block_some"
	person_generation: Literal[
		"dont_allow", "allow_adult", "allow_all"
	] = "allow_adult"


def generate_image(
		img_input: ImageGenerationInput, gcp_image_model: ImageGenerationModel
) -> Optional[bytes]:
	try:
		# Wrap the blocking model call in run_in_threadpool
		images = gcp_image_model.generate_images(
				prompt=img_input.prompt,
				number_of_images=img_input.number_of_images,
				language=img_input.language,
				aspect_ratio=img_input.aspect_ratio,
				safety_filter_level=img_input.safety_filter_level,
				person_generation=img_input.person_generation,
			)

		if not images:
			logger.error(
				"No images were generated. "
				f"This was the prompt: {img_input.prompt}"
			)
			return None

		image = images[0]
		image_bytes = image._image_bytes
		return image_bytes
	except Exception as e:
		logger.error("x"*100 + "\n\n" + str(e) + "x"*100)
	return None


def upscale_image_resolution(image_url: str) -> Optional[str]:
	try:
		image_bytes, mime_type = download_image(image_url)
		if not image_bytes or not genai_client:
			return None
	
		# Wrap the blocking model call in run_in_threadpool
		upscaled_image = genai_client.models.upscale_image(
			model="imagen-3.0-generate-001",
			image=types.Image(image_bytes=image_bytes, mime_type=mime_type),
			upscale_factor='x4',
			config=types.UpscaleImageConfig(
				include_rai_reason=True,
				output_mime_type='image/jpeg',
			),
		)
	
		if not upscaled_image:
			logger.error(
				"No upscaled image was generated. "
				f"This was the image URL: {image_url}"
			)
			return None

		upscaled_image_bytes = upscaled_image.generated_images[0].image.image_bytes
		if not upscaled_image_bytes:
			return None
		return upload_resp_file_content_to_bucket(
			resp_file_content=upscaled_image_bytes,
			filename=random_name_generator() + ".jpg",
			content_type="image/jpeg"
		)
	except Exception as e:
		logger.error("x"*100 + "\n\n" + str(e) + "\n\n" + "x"*100)


def edit_image_from_url(prompt: str, image_url: str) -> Optional[str]:
	try:
		if not all([prompt, image_url, genai_client]):
			return None
		
		image_bytes, mime_type = download_image(image_url)
		
		response = genai_client.models.generate_content(
			model="gemini-2.0-flash-exp-image-generation",
			contents=[
				{"text": prompt},
				{"inline_data": {"data": image_bytes, "mime_type": mime_type}}
			],
			config=types.GenerateContentConfig(
				response_modalities=['Image',]
			)
		)
		
		if not response:
			logger.error(
				"No edited image was generated. "
				f"This was the prompt: {prompt} and image URL: {image_url}"
			)
			return None
		
		edited_image_bytes = response.generated_content[0].image.image_bytes
		
		if not edited_image_bytes:
			return None
		return upload_resp_file_content_to_bucket(
			resp_file_content=edited_image_bytes,
			filename=random_name_generator() + ".jpg",
			content_type="image/jpeg"
		)
	except Exception as e:
		logger.error("x"*100 + "\n\n" + str(e) + "\n\n" + "x"*100)
